Project: dynu CLI for Nushell

Repository Structure:
- constants.nu: exports configuration constants (dynu directory path, file suffix) and debug flags.
- core.nu: pure table manipulation functions (core_add, core_sort_by, core_remove_at, core_update_at, core_purge, core_add_field, core_remove_field).
- tables.nu: user-facing commands for table management (add_table, ls_tables, rm_table, set_current_table, get_current_table_name, get_current_table_path, get_table_names) and snake_case aliases.
- fields.nu: user-facing commands for field management (ls fields, add field, rm field) with debug options.
- dynu.nu: CLI definition combining core, tables, and fields to implement interactive commands: add, edit elm, rm elm, purge, color_by_grade, save_sort_show.
- run_tests.nu: automated test runner that prepares a temporary HOME, runs core and user integration tests.
- tests/core_tests.nu: unit tests for core.nvim functions without file I/O.
- tests/user_tests.nu: integration tests for the dynu CLI, stubbing user input via TEST_INPUTS and CALL_INDEX to simulate interactive prompts.
- tests/tmp_home: sandbox HOME directory for integration tests.

Quick Start (requires Nushell v0.103.0):
1. Make tests runner executable:
     chmod +x run_tests.nu
2. Run all tests:
     ./run_tests.nu

Standalone Tests:
- Unit tests: cd tests && nu core_tests.nu
- Integration tests: cd tests && HOME=$(pwd)/tmp_home nu user_tests.nu

Test Stub Details (in tests/user_tests.nu):
- TEST_INPUTS array feeds dummy answers to input() calls.
- CALL_INDEX (env var) tracks which answer to return next.
- input prompt function reads from TEST_INPUTS and increments CALL_INDEX.

Debugging:
- Toggle debug flags in constants.nu:
     is_debug_tables, is_debug_fields, is_debug_dynu = true
  to see internal state and verbose messages.

Testing your Nushell Code (reference patterns):
--------------------------------------------------
Assert Commands:
  use std/assert
  assert (condition)           # basic assertion
  assert equal (expr) (val)    # equality check with helpful message
  assert str contains $haystack $needle
  # Custom asserts can be defined for richer errors.

Writing Tests:
1. Nupm Package Tests:
   - Create a tests/ directory alongside the .nuon package.
   - Add mod.nu to make it a module.
   - Export def commands; run with `nupm test`.

2. Standalone Scripts:
   - Write tests in a .nu file (e.g., tests.nu) using `use` to import modules.
   - Run: `nu tests.nu` or integrate into CI/Makefile.

3. Basic Test Framework:
   - Use `scope commands` and `nu --commands` to auto-discover `test ` prefixed functions.
   - Define setup/teardown as needed.

Example:
----
use std/assert
source math.nu
for t in [ [input, expected]; [0,0], [1,1], ... ] {
  assert equal (fib $t.input) $t.expected
}
nu tests.nu
----

This context file aims to help future Codex sessions understand the dynu project layout, core functions, CLI behavior, and testing approach in Nushell.